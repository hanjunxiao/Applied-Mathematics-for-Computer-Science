#################################################
# Polynomial Fitting
# Author : Junxiao Han
# Date   : 2016-5-26
# Email  : junxiaohan@foxmail.com
#################################################

import numpy as np
import matplotlib.pyplot as plt
import math

# Sample the function curve of y=sin(x) with Gaussian noise
def sample(num,mu,sigma):
	x = np.linspace(0,1,num)
	y = [math.sin(2*np.pi*x_i)+np.random.normal(mu, sigma) for x_i in x]
	return x, y

# Sovle the theta by least square
def least_square(X,y,lamb):
	X = np.mat(X)
	y = np.mat(y).T
	I = np.identity(X.T.shape[0])
	I = np.mat(I)
	theta = (X.T*X+lamb*I).I*(X.T)*y
	return np.squeeze(np.asarray(theta))

# Polynomial fitting, return the theta vector
def fit(x,y,degree,lamb=0):
	X = []
	for x_i in x:
		X.append([x_i**d for d in range(degree+1)])
	X = np.array(X)
	y = np.array(y)
	theta = least_square(X,y,lamb)
	return theta

if __name__ == "__main__":
	num = 10
	degree = 3
	mu = 0
	sigma = 0.3
	x,y = sample(num,mu,sigma)
	plt.figure()

	# Plot the true generation function
	true_x = np.linspace(0,1,100)
	true_y = [math.sin(2*np.pi*x_i) for x_i in true_x]
	plt.plot(true_x,true_y, color='green',linewidth=2, label='$sin(2\pi{x})$')

	# Plot the scatter points of samples
	plt.scatter(x,y,s=30,color='blue', facecolors='none',linewidth=2)

	fit_x = np.linspace(0,1,100)

	theta = fit(x,y,degree,lamb=0.0000)
	fit_X = []

	for x_i in fit_x:
		fit_X.append([x_i**d for d in range(degree+1)])
	fit_X = np.array(fit_X)
	fit_y = np.dot(fit_X, theta)

	# Plot the fitted line
	plt.plot(fit_x, fit_y.tolist(), color='r',linewidth=2, label='$N=10; D=3;\\lambda=0$')
	
	plt.xlabel("$x$")
	plt.ylabel("$t$")
	plt.legend()
	plt.show()
