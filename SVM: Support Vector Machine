#################################################
# SVM: Support Vector Machine
# Author : Junxiao Han
# Date   : 2016-5-26
# Email  : junxiaohan@foxmail.com
#################################################

import numpy as np
from cvxopt import matrix
from cvxopt import solvers
import matplotlib.pyplot as plt

# Define the structure of SVM, some proporities will be defined
class SVMStruct:  
	def __init__(self, dataSet, labels, C):  
		self.train_X = dataSet # each row stands for a sample  
		self.train_y = labels  # corresponding label
		self.w = 0
		self.b = 0
		self.C = C             # slack variable 
		self.alpha = 0
		self.numSamples = dataSet.shape[0] # number of samples  
       
# Training the SVM classifer, and return it
def trainSVM(train_X, train_y, C):
	# init data struct for svm
	svm = SVMStruct(np.mat(train_X), np.mat(train_y), C)
	N = train_X.getA().shape[0]
	M = train_X.getA().shape[1]
	# P
	P = np.zeros((N,N))
	for n in range(N):
		for m in range(N):
			P[n][m] = train_y.getA()[n]*train_y.getA()[m]*(train_X.getA()[n].dot(train_X.getA()[m]))
	P = matrix(P)
	# q
	q = matrix(-np.ones((N,1)))
	# G
	G = matrix(np.vstack((np.diag(-np.ones(N)),np.diag(np.ones(N)))), tc='d')
	# h
	h = matrix(np.hstack((np.zeros((N)),np.ones(N)*C)))
	# A
	A = matrix(np.transpose(train_y.getA()))
	# b
	b = matrix(np.zeros((1,1)))
	# Solving alpha by Quadratic Programming
	sol = solvers.qp(P,q,G,h,A,b)
	alpha = np.array(sol['x'])
	svm.alpha = alpha

	w = np.zeros((1,2))
	for i in range(N):
		w += alpha[i][0]*train_y.getA()[i][0]*train_X.getA()[i]
	svm.w = w
	b = train_y.getA()[0][0] - np.dot(w, train_X.getA()[0])
	svm.b = b
	return svm

# testing your trained svm model given test set
def testSVM(svm, test_X, test_y):
	test_X = np.mat(test_X)
	test_y = np.mat(test_y)
	num_test_samples = test_X.shape[0]
	# Calculate the accuracy of trained svm classifier
	match_count = 0
	for i in xrange(num_test_samples):
		# Predict the label of each test sample
		predict = np.dot(svm.w, np.transpose(test_X[i])) + svm.b
		if np.sign(predict) == np.sign(test_y[i]):
			match_count += 1
	accuracy = float(match_count) / num_test_samples
	return accuracy

# show your trained svm model only available with 2-D data
def showSVM(svm):
	if svm.train_X.shape[1] != 2:
		print "Only the 2-D samples can be displayed."
		return 1
	# draw all samples
	for i in xrange(svm.numSamples):
		if svm.train_y[i] == -1:
			plt.plot(svm.train_X[i, 0], svm.train_X[i, 1], 'or')
		elif svm.train_y[i] == 1:
			plt.plot(svm.train_X[i, 0], svm.train_X[i, 1], 'ob')
	
	# draw the classify line
	min_x = min(svm.train_X[:, 0])[0, 0]
	max_x = max(svm.train_X[:, 0])[0, 0]
	y_min_x = float(-svm.b - svm.w[0][0] * min_x) / svm.w[0][1]
	y_max_x = float(-svm.b - svm.w[0][0] * max_x) / svm.w[0][1]
	plt.plot([min_x, max_x], [y_min_x, y_max_x], '-g')
	plt.show()

if __name__ == "__main__":
	#Load data from test dataset
	X = []
	y = []
	fileIn = open('testdata.txt')
	for line in fileIn.readlines():
		X.append([float(line.strip().split('\t')[0]), float(line.strip().split('\t')[1])])
		y.append(float(line.strip().split('\t')[2]))

	X = np.mat(X)
	y = np.mat(y).T
	train_X = X[0:81, :]
	train_y = y[0:81, :]
	test_X = X[80:101, :]
	test_y = y[80:101, :]

	#Training...
	C = 0.6 # Slack variable
	svm = trainSVM(train_X, train_y, C)

	#Testing
	accuracy = testSVM(svm, test_X, test_y)

	#print the accuracy and plot the result
	print "accuracy: " + str(accuracy) 
	showSVM(svm)
